// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model Student {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String
  age               Int
  grade             String
  schoolID          Int
  teamID            Int?
  moderatorAccess   Boolean
  token             String?
  password          String
  school            School              @relation(fields: [schoolID], references: [id])
  teams             StudentOnTeam[]
  tryoutParticipant TryoutParticipant[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
}

model StudentOnTeam {
  studentId Int
  teamId    Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([studentId, teamId])
}

model School {
  id             Int                   @id @default(autoincrement())
  name           String                @unique
  address        String
  contactDetails String
  passkey        String?
  domain         String?
  coaches        Coach[]
  teams          Team[]
  student        Student[]
  tryouts        Tryout[]
  participations ParticipatingSchool[]
  tournaments    Tournament[]
  events         Events[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Coach {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  token     String?
  schoolID  Int
  password  String
  school    School    @relation(fields: [schoolID], references: [id])
  team      Team[]
  tryouts   Tryout[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// model Team {
//   id          Int             @id @default(autoincrement())
//   name        String
//   schoolID    Int
//   coachID     Int
//   typeOfSport String
//   school      School          @relation(fields: [schoolID], references: [id])
//   coach       Coach           @relation(fields: [coachID], references: [id])
//   students    StudentOnTeam[]
//   fixtures1   Fixture[]       @relation("team1")
//   fixtures2   Fixture[]       @relation("team2")
//   createdAt   DateTime        @default(now())
//   updatedAt   DateTime?       @updatedAt
// }
model Team {
  id          Int             @id @default(autoincrement())
  name        String
  schoolID    Int
  coachID     Int
  typeOfSport String
  school      School          @relation(fields: [schoolID], references: [id])
  coach       Coach           @relation(fields: [coachID], references: [id])
  students    StudentOnTeam[]
  scoreLogs   ScoreLog[]

  createdAt      DateTime            @default(now())
  updatedAt      DateTime?           @updatedAt
  participations TeamParticipation[]
  Versions       TeamVersion[]
  TeamScore      TeamScore[]
}

model Fixture {
  id                   Int               @id @default(autoincrement())
  location             String
  teamParticipationId1 Int
  teamParticipation1   TeamParticipation @relation("TeamParticipationToFixture1", fields: [teamParticipationId1], references: [id])
  teamParticipationId2 Int
  teamParticipation2   TeamParticipation @relation("TeamParticipationToFixture2", fields: [teamParticipationId2], references: [id])
  tournamentID         Int

  isBye     Boolean     @default(false)
  startDate DateTime
  endDate   DateTime
  round     Int         @default(1)
  winnerID  Int?
  status    String      @default("pending")
  scoreLog  ScoreLog[]
  teamScore TeamScore[]

  tournament Tournament @relation(fields: [tournamentID], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model StatMetric {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  dataType    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tournament {
  id                     Int                   @id @default(autoincrement())
  name                   String
  location               String
  startDate              DateTime
  endDate                DateTime
  typeOfSport            String
  fixtures               Fixture[]
  schools                ParticipatingSchool[]
  organizingSchoolId     Int
  tournamentDays         TournamentDay[]
  intervalBetweenMatches Int
  matchDuration          Int
  organizerCoachId       Int
  teamParticipations     TeamParticipation[]
  gender                 String

  organizingSchool School    @relation(fields: [organizingSchoolId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
}

model TournamentDay {
  id           Int        @id @default(autoincrement())
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Dispute {
  id                Int       @id @default(autoincrement())
  scoreUpdateID     Int
  disputingCoachID  Int
  reason            String
  resolutionDetails String
  status            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model ScoreUpdate {
  id                Int       @id @default(autoincrement())
  fixtureID         Int
  proposingCoachID  Int
  confirmingCoachID Int
  time              DateTime
  scoreDetails      String
  status            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model PlayerStat {
  id        Int       @id @default(autoincrement())
  fixtureID Int
  studentID Int
  metrics   Json
  timestamp DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model MatchResult {
  id                 Int               @id @default(autoincrement())
  fixtureID          Int
  homeTeamID         Int
  awayTeamID         Int
  finalScore         String
  homeTeamScore      String
  awayTeamScore      String
  confirmationStatus String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  homeTeam           TeamParticipation @relation("HomeTeamParticipationToMatchResult", fields: [homeTeamID], references: [id])
  awayTeam           TeamParticipation @relation("AwayTeamParticipationToMatchResult", fields: [awayTeamID], references: [id])
}

model TeamParticipation {
  id           Int  @id @default(autoincrement())
  teamId       Int
  tournamentId Int
  team         Team @relation(fields: [teamId], references: [id])

  tournament  Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  fixtures1   Fixture[]     @relation("TeamParticipationToFixture1")
  fixtures2   Fixture[]     @relation("TeamParticipationToFixture2")
  homeMatches MatchResult[] @relation("HomeTeamParticipationToMatchResult")
  awayMatches MatchResult[] @relation("AwayTeamParticipationToMatchResult")

  @@index([teamId], name: "teamId")
  @@index([tournamentId], name: "tournamentId")
}

model TeamVersion {
  id        Int      @id @default(autoincrement())
  teamId    Int
  version   Int
  players   Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, version])
}

model Tryout {
  id                Int                 @id @default(autoincrement())
  name              String
  date              DateTime
  location          String
  coachID           Int
  schoolID          Int
  coach             Coach               @relation(fields: [coachID], references: [id])
  school            School              @relation(fields: [schoolID], references: [id])
  tryoutParticipant TryoutParticipant[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
}

model TryoutParticipant {
  id        Int       @id @default(autoincrement())
  tryoutID  Int
  studentID Int
  status    String
  tryout    Tryout    @relation(fields: [tryoutID], references: [id])
  student   Student   @relation(fields: [studentID], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Otp {
  id        Int       @id @default(autoincrement())
  userLogin String
  otp       String
  status    String
  purpose   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ParticipatingSchool {
  schoolId     Int
  tournamentId Int
  school       School     @relation(fields: [schoolId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@id([schoolId, tournamentId])
}

model Events {
  id                Int       @id @default(autoincrement())
  title             String
  start             DateTime
  end               DateTime
  allDay            Boolean
  isInterHouseEvent Boolean
  schoolID          Int
  details           Json
  typeOfEvent       String
  school            School    @relation(fields: [schoolID], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model ScoreLog {
  id        Int       @id @default(autoincrement())
  fixtureID Int
  teamID    Int
  playerID  Int?
  timestamp DateTime  @default(now())
  eventType EventType
  details   String?

  fixture Fixture @relation(fields: [fixtureID], references: [id])
  team    Team    @relation(fields: [teamID], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum EventType {
  Goal
  RedCard
  YellowCard
}

model TeamScore {
  id        Int @id @default(autoincrement())
  fixtureID Int
  teamID    Int
  goals     Int @default(0)

  fixture Fixture @relation(fields: [fixtureID], references: [id])
  team    Team    @relation(fields: [teamID], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([fixtureID, teamID])
}

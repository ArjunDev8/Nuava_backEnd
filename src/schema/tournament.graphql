type Tournament {
  id: Int!
  name: String!
  location: String!
  startDate: String!
  endDate: String!
  typeOfSport: typeOfSport!
  organizingSchoolId: Int!
  createdAt: String!
  updatedAt: String!
}

# interface CreateTournamentInput {
#   name: string;
#   location: string;
#   startDate: Date;
#   endDate: Date;
#   typeOfSport: typesOfSport;
#   participatingSchoolNames: string[];
#   intervalBetweenMatches: number;
#   tournamentDays: {
#     date: Date;
#     startTime: Date;
#     endTime: Date;
#   }[];
#   matchDuration: number;
# }

input CreateTournamentInput {
  name: String!
  location: String!
  startDate: String!
  endDate: String!
  typeOfSport: typeOfSport!
  intervalBetweenMatches: Int!
  tournamentDays: [TournamentDayInput!]!
  matchDuration: Int!
  gender: String!
  participatingSchoolNames: [String!]!
}

input TournamentDayInput {
  date: String!
  startTime: String!
  endTime: String!
}

input EditTournamentInput {
  tournamentID: Int!
  name: String
  location: String
  startDate: String
  endDate: String
  typeOfSport: typeOfSport
  intervalBetweenMatches: Int
  tournamentDays: [TournamentDayInput!]
  matchDuration: Int
  gender: String
  participatingSchoolNames: [String!]
}

input DeleteTournamentInput {
  id: Int!
}

type DeleteTournamentResponse {
  status: Boolean!
  message: String!
}

type EditTournamentResponse {
  status: Boolean!
  message: String!
  tournament: Tournament
}

type CreateTournamentResponse {
  status: Boolean!
  message: String!
  tournament: Tournament
}

enum typeOfSport {
  FOOTBALL
}

input SwapTeamsInput {
  fixtureId1: Int!
  fixtureId2: Int!
  team1Id: Int!
  team2Id: Int!
}

input DeleteFixtureInput {
  fixtureId: Int!
}

input EditFixtureInput {
  fixtureId: Int!
  fixtureStartTime: String!
  fixtureEndTime: String!
  fixtureLocation: String!
}

input GetBracketsInput {
  tournamentId: Int!
}

type Bracket {
  id: ID!
  name: String!
  nextMatchId: ID
  tournamentRoundText: String!
  startTime: String!
  state: String! # 'NO_SHOW' | 'WALK_OVER' | 'NO_PARTY' | 'DONE' | 'SCORE_DONE'
  participants: [Participant!]!
}

type Participant {
  id: ID
  name: String
  resultText: String # 'WON' or null
  isWinner: Boolean
  status: String # 'PLAYED' | 'NO_SHOW' | 'WALK_OVER' | 'NO_PARTY' | null
}

input CreateEventInput {
  title: String!
  startDate: String!
  endDate: String!
  isAllDay: Boolean!
  description: String!
}

input EditEventInput {
  eventId: Int!
  title: String
  startDate: String
  endDate: String
  isAllDay: Boolean
  desciprtion: String
}

input DeleteEventInput {
  eventId: Int!
}

type Event {
  id: Int!
  title: String!
  startDate: String!
  endDate: String!
  isAllDay: Boolean!
  details: String!
  typeOfEvent: String!
}

input CreateInterHouseEventInput {
  title: String!
  startDate: String!
  endDate: String!
  isAllDay: Boolean!
  description: String
  house1Name: String!
  house2Name: String!
  typeOfSport: String!
}

input EditInterHouseEventInput {
  eventId: Int!
  title: String
  startDate: String
  endDate: String
  isAllDay: Boolean
  description: String
  house1Name: String
  house2Name: String
  typeOfSport: String
}

input StartFixtureInput {
  fixtureId: Int!
}

input EndFixtureInput {
  fixtureId: Int!
  winnerID: Int!
}

input GetFixtureResultsInput {
  tournamentId: Int!
}

type FixtureResult {
  fixtureId: Int!
  tournamentName: String
  team1: MatchDetailsAndScoreForTeam
  team2: MatchDetailsAndScoreForTeam
  finalScore: String
}

input FixtureUpdatesInput {
  fixtureId: Int!
  eventType: EventType!
  teamId: Int!
  playerId: Int
  isATeamWithoutPlayers: Boolean!
}

# enum EventType {
#   Goal
#   RedCard
#   YellowCard
# }

enum EventType {
  Goal
  RedCard
  YellowCard
}

input ScoreUpdatesInput {
  fixtureId: Int!
}

input MakeStudentModeratorInput {
  studentId: Int!
}

type ScoreUpdatesResponse {
  fixtureId: Int!
  eventType: EventType!
  teamId: Int!
  playerId: Int
}

type CardsGivenTo {
  playerId: Int
  playerName: String
  eventType: String
}

type MatchDetailsAndScoreForTeam {
  teamID: Int!
  teamName: String
  score: String
  matchEvents: [CardsGivenTo]
}

type MatchDetailsAndScore {
  fixtureId: Int!
  teamDetails: [MatchDetailsAndScoreForTeam]!
  score: String!
}

type Fixture {
  id: Int!
  location: String!
  teamParticipationId1: Int!
  teamParticipationId2: Int!
  tournamentID: Int!
  isBye: Boolean!
  startDate: String!
  endDate: String!
  round: Int!
  winnerID: Int
  team1: String!
  team2: String!
  status: String!
  createdAt: String!
  updatedAt: String!
}

type FixturesData {
  tournamentName: String!
  fixtures: [Fixture]!
}
